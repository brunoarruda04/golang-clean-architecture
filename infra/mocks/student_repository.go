// Code generated by MockGen. DO NOT EDIT.
// Source: entities/student.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/brunoarruda04/golang-clean-architecture/entities"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStudentRepository is a mock of StudentRepository interface.
type MockStudentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStudentRepositoryMockRecorder
}

// MockStudentRepositoryMockRecorder is the mock recorder for MockStudentRepository.
type MockStudentRepositoryMockRecorder struct {
	mock *MockStudentRepository
}

// NewMockStudentRepository creates a new mock instance.
func NewMockStudentRepository(ctrl *gomock.Controller) *MockStudentRepository {
	mock := &MockStudentRepository{ctrl: ctrl}
	mock.recorder = &MockStudentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentRepository) EXPECT() *MockStudentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStudentRepository) Create(student *entities.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStudentRepositoryMockRecorder) Create(student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStudentRepository)(nil).Create), student)
}

// Delete mocks base method.
func (m *MockStudentRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudentRepository)(nil).Delete), id)
}

// FindById mocks base method.
func (m *MockStudentRepository) FindById(id uuid.UUID) (entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockStudentRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockStudentRepository)(nil).FindById), id)
}

// List mocks base method.
func (m *MockStudentRepository) List() ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStudentRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStudentRepository)(nil).List))
}

// Update mocks base method.
func (m *MockStudentRepository) Update(student *entities.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStudentRepositoryMockRecorder) Update(student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudentRepository)(nil).Update), student)
}
